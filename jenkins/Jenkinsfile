pipeline {
    agent {
        docker {
            image 'node:6-alpine'
            args '-p 3000:3000 -p 5000:5000'
        }
    }
    environment {
        CI = 'true'
    }
    stages {
        stage('Build') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            steps {
                sh './jenkins/scripts/test.sh'
            }
        }
        stage('Deliver for development') {
            when {
                branch 'development'
            }
            steps {
                sh './jenkins/scripts/deliver-for-development.sh'
                input message: 'Finished using the web site? (Click "Proceed" to continue)'
                sh './jenkins/scripts/kill.sh'
            }
        }
        stage('Deploy for production') {
            when {
                branch 'production'
            }
            steps {
                sh './jenkins/scripts/deploy-for-production.sh'
                input message: 'Finished using the web site? (Click "Proceed" to continue)'
                sh './jenkins/scripts/kill.sh'
            }
        }
    }


     /* Multiple Steps 
    agent { label 'master' }
    stages {
       stage('build') {
          steps {
             sh 'echo step1'
             sh 'echo step2'
             sh '''
                echo 'Multiline'
                echo 'Example'
             '''
             echo 'not using shell'
          }
       }
    } */

    /**
    pipeline {
     agent { label 'master' }
     stages {
         stage('deploy') {
             steps {
                 retry(3) {
                    sh 'echo deploying...'
                 }
                 timeout(time: 10, unit: 'MINUTES') {
                    sh 'echo checking health...'
                 }            
             }
         }
     }
}
    **/

    /**
        Cleaning up after yourself
         pipeline {
            agent { label 'master' }
            stages {
            stage('test') {
                steps {
                    sh 'fail me please'
                }
            }
            }

            post {
                always {
                sh 'This will always run'
                }
                success {
                sh 'This will run only if successful'
                }
                failure {
                sh 'This will run only if failed'
                }
                unstable {
                sh 'This will run only if the run was marked as unstable'
                }
                changed {
                sh 'This will run only if the state of the Pipeline has changed')
                sh 'For example, the Pipeline was previously failing but is now successful'
                }
            }
}
     **/
}
